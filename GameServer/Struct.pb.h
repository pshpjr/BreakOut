// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class KeyInput;
struct KeyInputDefaultTypeInternal;
extern KeyInputDefaultTypeInternal _KeyInput_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class StateU;
struct StateUDefaultTypeInternal;
extern StateUDefaultTypeInternal _StateU_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::KeyInput* Arena::CreateMaybeMessage<::Protocol::KeyInput>(Arena*);
template<> ::Protocol::Player* Arena::CreateMaybeMessage<::Protocol::Player>(Arena*);
template<> ::Protocol::StateU* Arena::CreateMaybeMessage<::Protocol::StateU>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return new Player();
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kNameFieldNumber = 2,
    kStartVectorFieldNumber = 3,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float startVector = 3;
  void clear_startvector();
  float startvector() const;
  void set_startvector(float value);
  private:
  float _internal_startvector() const;
  void _internal_set_startvector(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float startvector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class KeyInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.KeyInput) */ {
 public:
  inline KeyInput() : KeyInput(nullptr) {}
  ~KeyInput() override;
  explicit constexpr KeyInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyInput(const KeyInput& from);
  KeyInput(KeyInput&& from) noexcept
    : KeyInput() {
    *this = ::std::move(from);
  }

  inline KeyInput& operator=(const KeyInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyInput& operator=(KeyInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyInput* internal_default_instance() {
    return reinterpret_cast<const KeyInput*>(
               &_KeyInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyInput& a, KeyInput& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyInput* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyInput* New() const final {
    return new KeyInput();
  }

  KeyInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyInput& from);
  void MergeFrom(const KeyInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.KeyInput";
  }
  protected:
  explicit KeyInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnOffFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // bool onOff = 1;
  void clear_onoff();
  bool onoff() const;
  void set_onoff(bool value);
  private:
  bool _internal_onoff() const;
  void _internal_set_onoff(bool value);
  public:

  // bool direction = 2;
  void clear_direction();
  bool direction() const;
  void set_direction(bool value);
  private:
  bool _internal_direction() const;
  void _internal_set_direction(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.KeyInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool onoff_;
  bool direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class StateU final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.StateU) */ {
 public:
  inline StateU() : StateU(nullptr) {}
  ~StateU() override;
  explicit constexpr StateU(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateU(const StateU& from);
  StateU(StateU&& from) noexcept
    : StateU() {
    *this = ::std::move(from);
  }

  inline StateU& operator=(const StateU& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateU& operator=(StateU&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateU& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateU* internal_default_instance() {
    return reinterpret_cast<const StateU*>(
               &_StateU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StateU& a, StateU& b) {
    a.Swap(&b);
  }
  inline void Swap(StateU* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateU* New() const final {
    return new StateU();
  }

  StateU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateU& from);
  void MergeFrom(const StateU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.StateU";
  }
  protected:
  explicit StateU(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kBVecXFieldNumber = 2,
    kBVecYFieldNumber = 3,
    kBLocXFieldNumber = 4,
    kBLocYFieldNumber = 5,
    kCLocXFieldNumber = 6,
    kLifeFieldNumber = 7,
    kBoardStateFieldNumber = 8,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // float bVecX = 2;
  void clear_bvecx();
  float bvecx() const;
  void set_bvecx(float value);
  private:
  float _internal_bvecx() const;
  void _internal_set_bvecx(float value);
  public:

  // float bVecY = 3;
  void clear_bvecy();
  float bvecy() const;
  void set_bvecy(float value);
  private:
  float _internal_bvecy() const;
  void _internal_set_bvecy(float value);
  public:

  // float bLocX = 4;
  void clear_blocx();
  float blocx() const;
  void set_blocx(float value);
  private:
  float _internal_blocx() const;
  void _internal_set_blocx(float value);
  public:

  // float bLocY = 5;
  void clear_blocy();
  float blocy() const;
  void set_blocy(float value);
  private:
  float _internal_blocy() const;
  void _internal_set_blocy(float value);
  public:

  // float cLocX = 6;
  void clear_clocx();
  float clocx() const;
  void set_clocx(float value);
  private:
  float _internal_clocx() const;
  void _internal_set_clocx(float value);
  public:

  // int32 life = 7;
  void clear_life();
  ::PROTOBUF_NAMESPACE_ID::int32 life() const;
  void set_life(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_life() const;
  void _internal_set_life(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 boardState = 8;
  void clear_boardstate();
  ::PROTOBUF_NAMESPACE_ID::uint64 boardstate() const;
  void set_boardstate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_boardstate() const;
  void _internal_set_boardstate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.StateU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  float bvecx_;
  float bvecy_;
  float blocx_;
  float blocy_;
  float clocx_;
  ::PROTOBUF_NAMESPACE_ID::int32 life_;
  ::PROTOBUF_NAMESPACE_ID::uint64 boardstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// string code = 1;
inline void Player::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& Player::code() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Player.code)
}
inline std::string* Player::mutable_code() {
  // @@protoc_insertion_point(field_mutable:Protocol.Player.code)
  return _internal_mutable_code();
}
inline const std::string& Player::_internal_code() const {
  return code_.Get();
}
inline void Player::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Player::release_code() {
  // @@protoc_insertion_point(field_release:Protocol.Player.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Player::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.Player.code)
}

// string name = 2;
inline void Player::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Player.name)
}
inline std::string* Player::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.Player.name)
  return _internal_mutable_name();
}
inline const std::string& Player::_internal_name() const {
  return name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.Player.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.Player.name)
}

// float startVector = 3;
inline void Player::clear_startvector() {
  startvector_ = 0;
}
inline float Player::_internal_startvector() const {
  return startvector_;
}
inline float Player::startvector() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.startVector)
  return _internal_startvector();
}
inline void Player::_internal_set_startvector(float value) {
  
  startvector_ = value;
}
inline void Player::set_startvector(float value) {
  _internal_set_startvector(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.startVector)
}

// -------------------------------------------------------------------

// KeyInput

// bool onOff = 1;
inline void KeyInput::clear_onoff() {
  onoff_ = false;
}
inline bool KeyInput::_internal_onoff() const {
  return onoff_;
}
inline bool KeyInput::onoff() const {
  // @@protoc_insertion_point(field_get:Protocol.KeyInput.onOff)
  return _internal_onoff();
}
inline void KeyInput::_internal_set_onoff(bool value) {
  
  onoff_ = value;
}
inline void KeyInput::set_onoff(bool value) {
  _internal_set_onoff(value);
  // @@protoc_insertion_point(field_set:Protocol.KeyInput.onOff)
}

// bool direction = 2;
inline void KeyInput::clear_direction() {
  direction_ = false;
}
inline bool KeyInput::_internal_direction() const {
  return direction_;
}
inline bool KeyInput::direction() const {
  // @@protoc_insertion_point(field_get:Protocol.KeyInput.direction)
  return _internal_direction();
}
inline void KeyInput::_internal_set_direction(bool value) {
  
  direction_ = value;
}
inline void KeyInput::set_direction(bool value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:Protocol.KeyInput.direction)
}

// -------------------------------------------------------------------

// StateU

// string code = 1;
inline void StateU::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& StateU::code() const {
  // @@protoc_insertion_point(field_get:Protocol.StateU.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StateU::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.StateU.code)
}
inline std::string* StateU::mutable_code() {
  // @@protoc_insertion_point(field_mutable:Protocol.StateU.code)
  return _internal_mutable_code();
}
inline const std::string& StateU::_internal_code() const {
  return code_.Get();
}
inline void StateU::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StateU::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StateU::release_code() {
  // @@protoc_insertion_point(field_release:Protocol.StateU.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StateU::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.StateU.code)
}

// float bVecX = 2;
inline void StateU::clear_bvecx() {
  bvecx_ = 0;
}
inline float StateU::_internal_bvecx() const {
  return bvecx_;
}
inline float StateU::bvecx() const {
  // @@protoc_insertion_point(field_get:Protocol.StateU.bVecX)
  return _internal_bvecx();
}
inline void StateU::_internal_set_bvecx(float value) {
  
  bvecx_ = value;
}
inline void StateU::set_bvecx(float value) {
  _internal_set_bvecx(value);
  // @@protoc_insertion_point(field_set:Protocol.StateU.bVecX)
}

// float bVecY = 3;
inline void StateU::clear_bvecy() {
  bvecy_ = 0;
}
inline float StateU::_internal_bvecy() const {
  return bvecy_;
}
inline float StateU::bvecy() const {
  // @@protoc_insertion_point(field_get:Protocol.StateU.bVecY)
  return _internal_bvecy();
}
inline void StateU::_internal_set_bvecy(float value) {
  
  bvecy_ = value;
}
inline void StateU::set_bvecy(float value) {
  _internal_set_bvecy(value);
  // @@protoc_insertion_point(field_set:Protocol.StateU.bVecY)
}

// float bLocX = 4;
inline void StateU::clear_blocx() {
  blocx_ = 0;
}
inline float StateU::_internal_blocx() const {
  return blocx_;
}
inline float StateU::blocx() const {
  // @@protoc_insertion_point(field_get:Protocol.StateU.bLocX)
  return _internal_blocx();
}
inline void StateU::_internal_set_blocx(float value) {
  
  blocx_ = value;
}
inline void StateU::set_blocx(float value) {
  _internal_set_blocx(value);
  // @@protoc_insertion_point(field_set:Protocol.StateU.bLocX)
}

// float bLocY = 5;
inline void StateU::clear_blocy() {
  blocy_ = 0;
}
inline float StateU::_internal_blocy() const {
  return blocy_;
}
inline float StateU::blocy() const {
  // @@protoc_insertion_point(field_get:Protocol.StateU.bLocY)
  return _internal_blocy();
}
inline void StateU::_internal_set_blocy(float value) {
  
  blocy_ = value;
}
inline void StateU::set_blocy(float value) {
  _internal_set_blocy(value);
  // @@protoc_insertion_point(field_set:Protocol.StateU.bLocY)
}

// float cLocX = 6;
inline void StateU::clear_clocx() {
  clocx_ = 0;
}
inline float StateU::_internal_clocx() const {
  return clocx_;
}
inline float StateU::clocx() const {
  // @@protoc_insertion_point(field_get:Protocol.StateU.cLocX)
  return _internal_clocx();
}
inline void StateU::_internal_set_clocx(float value) {
  
  clocx_ = value;
}
inline void StateU::set_clocx(float value) {
  _internal_set_clocx(value);
  // @@protoc_insertion_point(field_set:Protocol.StateU.cLocX)
}

// int32 life = 7;
inline void StateU::clear_life() {
  life_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StateU::_internal_life() const {
  return life_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StateU::life() const {
  // @@protoc_insertion_point(field_get:Protocol.StateU.life)
  return _internal_life();
}
inline void StateU::_internal_set_life(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  life_ = value;
}
inline void StateU::set_life(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_life(value);
  // @@protoc_insertion_point(field_set:Protocol.StateU.life)
}

// uint64 boardState = 8;
inline void StateU::clear_boardstate() {
  boardstate_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateU::_internal_boardstate() const {
  return boardstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateU::boardstate() const {
  // @@protoc_insertion_point(field_get:Protocol.StateU.boardState)
  return _internal_boardstate();
}
inline void StateU::_internal_set_boardstate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  boardstate_ = value;
}
inline void StateU::set_boardstate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_boardstate(value);
  // @@protoc_insertion_point(field_set:Protocol.StateU.boardState)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
